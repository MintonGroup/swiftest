[project]
name = "swiftest"
dynamic = ["version"]
description = "Swiftest is a software packaged designed to model the long-term dynamical dynamics of n-body systems with a dominant central body, like the solar system."
authors=[
    {name = 'David A. Minton', email='daminton@purdue.edu'},
    {name = 'Carlisle Wishard'},
    {name = 'Jennifer Pouplin'},
    {name = 'Jake Elliott'},
    {name = 'Dana Singh'},
    {name = 'Kaustub Anand'},
]
maintainers = [
    {name = 'David A. Minton', email='daminton@purdue.edu'},
]
readme = "README.md"
requires-python=">=3.10"
license={file = "LICENSE"}
classifiers=[
'Development Status :: 4 - Beta',
'Intended Audience :: Science/Research',
'Topic :: Scientific/Engineering :: Astronomy',
'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
'Programming Language :: Python :: 3',
]
keywords=['astronomy','astrophysics', 'planetary', 'n-body',  'integrator', 'symplectic', 'wisdom-holman', 'symba']
dependencies = [
    'numpy',
    'xarray>=2024.10.0',
    'scipy',
    'h5py>=3.12.1',
    'netcdf4',
    'h5netcdf',
    'dask',
    'distributed',
    'bottleneck',
    'matplotlib',
    'astropy>=6',
    'astroquery',
    'tqdm',
    'cython>=3'
]

[project.optional-dependencies]
pyshtools = ["pyshtools>=4.12.2"] 

[project.urls]
repository = 'https://github.com/MintonGroup/swiftest'
documentation = 'https://swiftest.readthedocs.io/en/latest/'
changelog = 'https://swiftest.readthedocs.io/en/latest/whats-new.html'

[project.scripts]
swiftest = "swiftest.cli:main"
swiftest_caf = "swiftest.cli:main_caf"

[build-system]
requires = [
    "scikit-build-core>=0.8.2",
    "cython>=3.0.8",
    "numpy>=1.26.4",
    "setuptools>=64", 
    "setuptools_scm>=8",
]
build-backend = "scikit_build_core.build"

[tool.scikit-build]
cmake.version = ">=3.23.1"
ninja.version = ">=1.11.1"
sdist.include = [
    "src/globals/globals_module.f90.in",
    "swiftest/*.py",
    "swiftest/*.pyx",
    "swiftest/*.h",
    "buildscripts/*.sh",
    "cmake/Modules/*.cmake",
    "examples/*/*.py",
    "examples/*/*/*.py",
    "examples/*/README.txt",
    "examples/*/*/README.txt",
    "docs/*.rst",
    "docs/Makefile",
    "docs/requirements.txt",
    "docs/environment.yml",
    "docs/conf.py",
    "docs/_templates/autosummary/*.rst",
    "docs/_static/style.css",
    "docs/_static/*.png",
    "docs/_static/*.svg",
    "docs/_static/logos/*.svg",
    "docs/_static/logos/*.png",
    "docs/fortran_docs.md",
    "docs/getting-started-guide/*.rst",
    "docs/user-guide/*.rst",
    ]
sdist.exclude = [".github"]
build-dir = "build/{wheel_tag}"
cmake.verbose = true
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"

[tool.setuptools_scm]
write_to = "swiftest/_version.py"

[tool.cibuildwheel]
test-command = "pytest -vv {package}/tests"
test-requires = [
    "pytest>=8.0.0",
    "numpy>=1.26.4"
]
skip = "pp* *i686 *-manylinux_i686 *_ppc64le *_s390x *-musllinux* *-win32"
build-verbosity = 1

[tool.cibuildwheel.macos.environment]
SKBUILD_CMAKE_ARGS=["-DMACHINE_CODE_VALUE=generic","-DUSE_COARRAY:BOOL=OFF"]
PREFIX="$(pwd)/build/deps/usr/local"
NETCDF_FORTRAN_HOME="${PREFIX}"
NETCDF_FORTRAN_INCLUDE="${NETCDF_FORTRAN_HOME}/include"
NETCDF_DIR="${NETCDF_FORTRAN_HOME}/lib/cmake/netCDF"
NETCDF_FORTRAN_DIR="${NETCDF_FORTRAN_HOME}/lib/cmake/netCDF"
SHTOOLS_HOME="${PREFIX}"
ARCH="$(uname -m)"
MACOSX_DEPLOYMENT_TARGET="$(buildscripts/get_macosx_deployment_target.sh)"
HOMEBREW_PREFIX="$(brew --prefix)"
LD_LIBRARY_PATH="${PREFIX}/lib:${HOMEBREW_PREFIX}/lib:${HOMEBREW_PREFIX}/lib/gcc/${GFORTRAN_VERSION}"
DYLD_LIBRARY_PATH="${LD_LIBRARY_PATH}"
REPAIR_LIBRARY_PATH="${LD_LIBRARY_PATH}"
LDFLAGS="-Wl,-no_compact_unwind -L${PREFIX}/lib -L${HOMEBREW_PREFIX}/lib -L${HOMEBREW_PREFIX}/lib/gcc/${GFORTRAN_VERSION}" 
CPATH="${PREFIX}/include:${HOMEBREW_PREFIX}/include"
CPPFLAGS="-isystem ${PREFIX}/include"
FCFLAGS="-arch ${ARCH}"
FFLAGS="${FCFLAGS}"
CFLAGS="${FCFLAGS} -Wno-deprecated-non-prototype -arch ${ARCH}"
CXXFLAGS="${CFLAGS}"
MPI_HOME="${HOMEBREW_PREFIX}"
PATH="${HOMEBREW_PREFIX}/opt/coreutils/libexec/gnubin:${HOMEBREW_PREFIX}/bin:${PREFIX}/bin:${PATH}"
GFORTRAN_VERSION="$(buildscripts/get_gfortran_version.sh)"
CC="mpicc"
CXX="mpic++"
FC="mpifort"
F77="mpifort"
F95="mpifort"
OMPI_FC="$(buildscripts/get_fortran_path.sh)"

[tool.cibuildwheel.linux.environment]
SKBUILD_CMAKE_ARGS=["-DMACHINE_CODE_VALUE=generic","-DUSE_COARRAY:BOOL=OFF"]
PREFIX="$(pwd)/build/deps/usr/local"
NETCDF_FORTRAN_HOME="${PREFIX}"
NETCDF_FORTRAN_INCLUDE="${NETCDF_FORTRAN_HOME}/include"
NETCDF_DIR="${NETCDF_FORTRAN_HOME}/lib/cmake/netCDF"
NETCDF_FORTRAN_DIR="${NETCDF_FORTRAN_HOME}/lib/cmake/netCDF"
SHTOOLS_HOME="${PREFIX}"
OpenCoarrays_DIR="${PREFIX}/../../opencoarrays/2.10.2/lib64/cmake/opencoarrays"
OpenCoarrays_HOME="${PREFIX}/../../opencoarrays/2.10.2"
MPI_HOME="/usr/lib64/openmpi"
CPATH="${PREFIX}/include:${CPATH}"
PATH="${PREFIX}/bin:${MPI_HOME}/bin:${PATH}"
LD_LIBRARY_PATH="${PREFIX}/lib:${HOMEBREW_PREFIX}/lib"
LIBS="-ldl"
CFLAGS="-Wa,--noexecstack"
CXXFLAGS="${CFLAGS}"
LDFLAGS="-L${PREFIX}/lib"
REPAIR_LIBRARY_PATH="${LD_LIBRARY_PATH}"
PKG_CONFIG_PATH="${PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}"
CC="mpicc"
CXX="mpic++"
FC="mpifort"
F77="mpifort"
F95="mpifort"
OMPI_FC="$(buildscripts/get_fortran_path.sh)"

[tool.cibuildwheel.macos]
before-all = [
    "brew install coreutils fftw vecLibFort opencoarrays open-mpi cmake",
    "buildscripts/build_dependencies.sh"
]
repair-wheel-command = """\
DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-wheel \
--require-archs {delocate_archs} -w {dest_dir} -v {wheel}
"""

[tool.cibuildwheel.linux]
before-all = [
    "yum install epel-release -y",
    "yum install doxygen libxml2-devel libcurl-devel fftw-static openblas-static openmpi-devel -y",
    "buildscripts/build_dependencies.sh"
]

[tool.cibuildwheel.windows.environment]
PREFIX="./build/deps/usr/local"
SHTOOLS_HOME="${PREFIX}"
CFLAGS="-fPIC -DMS_WIN64"
FCFLAGS="${CFLAGS}"
FFLAGS="${FCFLAGS}"
CXXFLAGS="${CFLAGS}"
LDFLAGS="-L${PREFIX}/lib"
CPPFLAGS="-I${PREFIX}/include"
LIBS="-ldl" 
LD_LIBRARY_PATH="${PREFIX}/lib:${LD_LIBRARY_PATH}"
CC="mpicc"
CXX="mpic++"
FC="mpifort"
F77="mpifort"
F95="mpifort"
OMPI_FC="gfortran"

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel"
repair-wheel-command = "delvewheel repair --ignore-existing -w {dest_dir} {wheel}"

