[project]
name = "swiftest"
version = "2024.3.1"
authors=[
    {name = 'David A. Minton', email='daminton@purdue.edu'},
    {name = 'Carlisle Wishard'},
    {name = 'Jennifer Pouplin'},
    {name = 'Jake Elliott'},
    {name = 'Dana Singh'},
    {name = 'Kaustub Anand'},
]
maintainers = [
    {name = 'David A. Minton', email='daminton@purdue.edu'},
]
readme = "README.md"
requires-python=">=3.9"
license={file = "LICENSE"}
classifiers=[
'Development Status :: 4 - Beta',
'Intended Audience :: Science/Research',
'Topic :: Scientific/Engineering :: Astronomy',
'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
'Programming Language :: Python :: 3',
]
keywords=['astronomy','astrophysics', 'planetary', 'n-body',  'integrator', 'symplectic', 'wisdom-holman', 'symba']
dependencies = [
    'numpy>=1.26.4',
    'scipy>=1.12.0',
    'xarray>=2024.2.0',
    'dask>=2024.2.1',
    'distributed>=2024.2.1',
    'bottleneck>=1.3.8',
    'h5netcdf>=1.3.0',
    'h5py>=3.10.0',
    'netcdf4>=1.6.5',
    'matplotlib>=3.8.3',
    'astropy>=6.0.0',
    'astroquery>=0.4.6',
    'tqdm>=4.66.2',
    'cython>=3.0.8',
]

[project.optional-dependencies]
pyshtools = ["pyshtools"] 

[project.urls]
repository = 'https://github.com/MintonGroup/swiftest'
documentation = 'https://swiftest.readthedocs.io/en/latest/'
changelog = 'https://swiftest.readthedocs.io/en/latest/whats-new.html'

[project.scripts]
swiftest = "swiftest.cli:main"

[build-system]
requires = [
    "scikit-build-core>=0.8.2",
    "cython>=3.0.8",
]
build-backend = "scikit_build_core.build"


[tool.scikit-build]
cmake.version = ">=3.23.1"
ninja.version = ">=1.11.1"
cmake.args = ["-DUSE_SIMD=OFF"]
sdist.include = ["src/globals/globals_module.f90.in","swiftest/*.py","swiftest/*.pyx","swiftest/*.h"]
build-dir = "build/{wheel_tag}"
cmake.verbose = true

[tool.cibuildwheel]
test-command = "pytest {package}/tests"
test-requires = ['pytest']
skip = "pp* *i686 *-manylinux_i686 *_ppc64le *_s390x *-musllinux* *-win32"
build-verbosity = 1

[tool.cibuildwheel.macos.environment]
MACOSX_DEPLOYMENT_TARGET="$(sw_vers -productVersion)"
ROOT_DIR="$(pwd)"
PREFIX="${ROOT_DIR}/build/deps/usr/local"
HOMEBREW_PREFIX="$(brew --prefix)"
ARCH="$(uname -m)"
LD_LIBRARY_PATH="${PREFIX}/lib:${HOMEBREW_PREFIX}/lib"
DYLD_LIBRARY_PATH="${LD_LIBRARY_PATH}"
REPAIR_LIBRARY_PATH="${LD_LIBRARY_PATH}"
LDFLAGS="-Wl,-rpath,${ROOT_DIR}/lib  -Wl,-no_compact_unwind -L${PREFIX}/lib -L${HOMEBREW_PREFIX}/lib" 
CPATH="${PREFIX}/include:${HOMEBREW_PREFIX}/include:${ROOT_DIR}/include"
CPPFLAGS="-isystem ${PREFIX}/include"
LIBS="-lomp"
FCFLAGS="-arch ${ARCH}"
FFLAGS="${FCFLAGS}"
CFLAGS="${FCFLAGS} -Wno-deprecated-non-prototype -arch ${ARCH}"
CXXFLAGS="${CFLAGS}"
HDF5_ROOT="${PREFIX}"
HDF5_LIBDIR="${HDF5_ROOT}/lib"
HDF5_INCLUDE_DIR="${HDF5_ROOT}/include"
HDF5_PLUGIN_PATH="${HDF5_LIBDIR}/plugin"
NCDIR="${PREFIX}"
NFDIR="${PREFIX}"
NETCDF_FORTRAN_HOME="${NFDIR}"
NETCDF_FORTRAN_INCLUDE="${NFDIR}/include"
SHTOOLS_HOME="${PREFIX}"
FC="$(command -v gfortran-12)"
F77="${FC}"
F95="${FC}"
CC="/usr/bin/clang"
CXX="/usr/bin/clang++"
CPP="/usr/bin/cpp"
AR="/usr/bin/ar"
NM="/usr/bin/nm"
RANLIB="/usr/bin/ranlib"
NETCDF_FORTRAN_DIR="${PREFIX}/lib/cmake/netCDF"

[tool.cibuildwheel.macos]
before-all = [
    "brew install coreutils pkg-config fftw vecLibFort",
    "LIBS=\"\" buildscripts/build_dependencies.sh -p ${PREFIX} -d ${HOME}/Downloads"
]
repair-wheel-command = """\
DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-wheel \
--require-archs {delocate_archs} -w {dest_dir} -v {wheel}
"""

[tool.cibuildwheel.linux.environment]
PREFIX="/usr/local"
NCDIR="${PREFIX}"
NFDIR="${PREFIX}"
NETCDF_FORTRAN_HOME="${NFDIR}"
NETCDF_FORTRAN_INCLUDE="${NFDIR}/include"
HDF5_ROOT="${PREFIX}"
HDF5_LIBDIR="${HDF5_ROOT}/lib"
HDF5_INCLUDE_DIR="${HDF5_ROOT}/include"
HDF5_PLUGIN_PATH="${HDF5_LIBDIR}/plugin"
LD_LIBRARY_PATH="${PREFIX}/lib:/project/lib:${HDF5_LIBDIR}"
CPATH="${PREFIX}/include:/project/include:${HDF5_INCLUDE_DIR}"
NETCDF_FORTRAN_DIR="${PREFIX}/lib/cmake/netCDF"
HDF5_DIR="${HDF5_ROOT}/cmake"
SHTOOLS_HOME="${PREFIX}"
PATH="${HDF5_ROOT}/bin:${PATH}"
CMAKE_INSTALL_LIBDIR="lib"

[tool.cibuildwheel.linux]
skip = "pp* *-manylinux_i686* *-musllinux* cp312-*_aarch64*"
before-all = [
    "yum install epel-release -y",
    "yum install doxygen libxml2-devel libcurl-devel fftw-static openblas-devel lapack-devel -y",
    "buildscripts/build_dependencies.sh -p /usr/local"
]

[[tool.scikit-build.generate]]
path = "version.txt"
location = "source"
template = '''${version}'''


